{"metadata":{"title":"CPIC Genotype-to-Phenotype for UGT1A1","arkId":"ark:/99999/fk47h1x090","version":"v0.1.0","owner":"KGRID","description":"KGrid CPIC guidelines Genotype to Phenotype for UGT1A1","contributors":"Koki Sasagawa ","keywords":"CPIC, genotype, phenotype, UGT1A1","published":true,"lastModified":1517248161972,"createdOn":1517247921124,"objectType":null,"citations":[{"citation_id":null,"citation_title":null,"citation_at":null}],"license":{"licenseName":"","licenseLink":""}},"inputMessage":"<rdf:RDF xmlns:ot=\"http://uofm.org/objectteller/#\"\n         xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n    <rdf:Description rdf:about=\"http://uofm.org/objectteller/inputMessage\">\n        <ot:noofparams>3</ot:noofparams>\n        <ot:params>\n            <rdf:Seq>\n                <rdf:li>diplotype</rdf:li>\n                <rdf:li>allele1</rdf:li>\n                <rdf:li>allele2</rdf:li>\n            </rdf:Seq>\n        </ot:params>\n    </rdf:Description>\n    <rdf:Description rdf:about=\"http://uofm.org/objectteller/age/\">\n        <ot:datatype>STRING</ot:datatype>\n    </rdf:Description>\n</rdf:RDF>\n","outputMessage":"<rdf:RDF xmlns:ot=\"http://uofm.org/objectteller/\"\n  xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n  <rdf:Description rdf:about=\"http://uofm.org/objectteller/outputMessage\">\n    <ot:returntype>STRING</ot:returntype>\n  </rdf:Description>\n</rdf:RDF>\n","payload":{"content":"# KGrid CPIC guidelines Genotype to Phenotype Payload\n# Koki Sasagawa \n# Last Updated: 1/24/2018\n\ndef alleleFormat(geno):\n\t\"\"\" \n\t\tSwaps the order of alleles to have the smaller number as allele1 and \n\t\tthe larger number as allele2. Also adds '*' to change to star format. \n\t\"\"\" \n\n\tif geno['diplotype']:\n\t\tdiplotype = geno['diplotype']\n\t\tlist_diplotype = diplotype.split('/')\n\t\t# If in starformat, remove. Otherwise it will be unchanged. \n\t\tallele1 = int(list_diplotype[0].replace('*',''))\n\t\tallele2 = int(list_diplotype[1].replace('*',''))\n\t\t# If allele1 is greater than allele2, swap the order.\n\t\tif allele1 > allele2:\n\t\t\tgeno['diplotype'] = '*' + str(allele2) + '/' + '*' + str(allele1)\n\t\telse:\n\t\t\tgeno['diplotype'] = '*' + str(allele1) + '/' + '*' + str(allele2)\n\n\telif geno['allele1'] and geno['allele2']:\n\t\t# If allele is in starformat, remove. Otherwise it will be unchanged. \n\t\tallele1 = int(geno['allele1'].replace('*',''))\n\t\tallele2 = int(geno['allele2'].replace('*',''))\n\t\t# If allele1 is greater than allele2, swap the order.\n\t\tif allele1 > allele2:\n\t\t\tgeno['allele1'] = '*' + str(allele2)\n\t\t\tgeno['allele2'] = '*' + str(allele1)\n\t\telse:\n\t\t\tgeno['allele1'] = '*' + str(allele1)\n\t\t\tgeno['allele2'] = '*' + str(allele2)\n\ndef execute(geno):\n\t\"\"\" Return the phenotype corresponding to the user specified genotype. \"\"\"\n\n\t# Dictionary containing Genotype to Phenotype Information\n\tgeno_pheno = {'*1/*1': 'UGT1A1 Normal Metabolizer', '*1/*27': 'UGT1A1 Intermediate Metabolizer', '*1/*28': 'UGT1A1 Intermediate Metabolizer', '*1/*36': 'UGT1A1 Normal Metabolizer', '*1/*37': 'UGT1A1 Intermediate Metabolizer', '*1/*6': 'UGT1A1 Intermediate Metabolizer', '*1/*80': 'UGT1A1 Intermediate Metabolizer', '*27/*27': 'UGT1A1 Poor Metabolizer', '*27/*28': 'UGT1A1 Poor Metabolizer', '*27/*36': 'UGT1A1 Intermediate Metabolizer', '*27/*37': 'UGT1A1 Poor Metabolizer', '*27/*80': 'UGT1A1 Poor Metabolizer', '*28/*28': 'UGT1A1 Poor Metabolizer', '*28/*36': 'UGT1A1 Intermediate Metabolizer', '*28/*37': 'UGT1A1 Poor Metabolizer', '*28/*80': 'UGT1A1 Poor Metabolizer', '*36/*36': 'UGT1A1 Normal Metabolizer', '*36/*37': 'UGT1A1 Intermediate Metabolizer', '*36/*80': 'UGT1A1 Intermediate Metabolizer', '*37/*37': 'UGT1A1 Poor Metabolizer', '*37/*80': 'UGT1A1 Poor Metabolizer', '*6/*27': 'UGT1A1 Poor Metabolizer', '*6/*28': 'UGT1A1 Poor Metabolizer', '*6/*36': 'UGT1A1 Intermediate Metabolizer', '*6/*37': 'UGT1A1 Poor Metabolizer', '*6/*6': 'UGT1A1 Poor Metabolizer', '*6/*80': 'UGT1A1 Poor Metabolizer', '*80/*80': 'UGT1A1 Poor Metabolizer'}\n\n\t# Arranging the order so the lower numerical allele is on the left. Also add a star '*' if not in star allele format. \n\talleleFormat(geno)\n\n\t# Metabolism Phenotype\n\tphenotype = \"\"\n\n\t# Get appropriate phenotype corresponding to gene\n\tif geno['diplotype']:\n\t\tif geno['diplotype'] in geno_pheno:\n\t\t\t# Assign appropriate phenotype pair value for the corresponding key(diplotype) from dictonary geno_pheno\n\t\t\tphenotype = geno_pheno[geno['diplotype']]\n\t\telse:\n\t\t \treturn (\"Incorrect/invalid input for diplotype.\")\n\n\telif geno['allele1'] and geno['allele2']:\n\t\t# Convert allele to diplotype format\n\t\tcombine_allele = geno['allele1'] + '/' + geno['allele2']\n\t\tif combine_allele in geno_pheno:\n\t\t\tphenotype = geno_pheno[combine_allele]\n\t\telse:\n\t\t \treturn (\"Incorrect/invalid input for alleles.\")\n\n\treturn phenotype","functionName":"execute","engineType":"PYTHON"},"logData":"ProvenanceLogData: \n\t wasAttributedTo: 'George Meng',\n\t wasGeneratedBy: 'https://dlhs-fedora-dev.med.umich.edu/fcrepo/rest/tx:bd08c801-f234-4999-a418-270ba92f584b/99999-fk47h1x090/Log/CreateActivity',\n\t wasAssociatedWith: 'George Meng',\n\t used: 'https://dlhs-fedora-dev.med.umich.edu/fcrepo/rest/tx:bd08c801-f234-4999-a418-270ba92f584b/99999-fk47h1x090/Log/CreateActivity',\n\t startedAtTime: Mon Jan 29 12:45:20 EST 2018,\n\t endedAtTime: Mon Jan 29 12:45:20 EST 2018","uri":"ark:/99999/fk47h1x090"}