{"metadata":{"title":"CPIC UTG1A1 geno-to-pheno","description":null,"citations":null,"arkId":null},"inputMessage":"<rdf:RDF xmlns:ot=\"http://uofm.org/objectteller/#\"\n         xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n    <rdf:Description rdf:about=\"http://uofm.org/objectteller/inputMessage\">\n        <ot:noofparams>4</ot:noofparams>\n        <ot:params>\n            <rdf:Seq>\n                <rdf:li>diplotype</rdf:li>\n        <rdf:li>allele1</rdf:li>\n         <rdf:li>allele2</rdf:li>\n   <rdf:li>phenotype</rdf:li>\n            </rdf:Seq>\n        </ot:params>\n    </rdf:Description>\n    <rdf:Description rdf:about=\"http://uofm.org/objectteller/age/\">\n        <ot:datatype>STRING</ot:datatype>\n    </rdf:Description>\n</rdf:RDF>\n","outputMessage":"\n<rdf:RDF xmlns:ot=\"http://uofm.org/objectteller/\"\n  xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n  <rdf:Description rdf:about=\"http://uofm.org/objectteller/outputMessage\">\n    <ot:returntype>STRING</ot:returntype>\n  </rdf:Description>\n</rdf:RDF>\n","payload":{"content":"#KGrid CPIC guidelines genotype to phenotype\n#Koki Sasagawa\n\n#ENGINE TYPE\n#PYTHON\n\n#CONTENT\n#geno = {\"diplotype\": \"\", \"allele1\": \"\", \"allele2\": \"\", \"phenotype\", \"\"}\n#input may be '*1/*1' or no stars '1/1'\n#or allele1 *1 or 1 allele2 *1 or 1\n\ndef alleleFormat(geno):\n\t\"\"\" \n\tThe following code will swap the order of alleles to always have the smaller number as allele1 and the larger number as allele2. It will also add '*' to change to star format if previous input was not. \n\t\"\"\"\n\tif geno['diplotype']:\n\t\tdiplotype = geno['diplotype']\n\t\tlist_diplotype = diplotype.split('/')\n\t\t# If in starformat, remove. Otherwise it will be left unchanged. \n\t\tallele1 = int(list_diplotype[0].replace('*',''))\n\t\tallele2 = int(list_diplotype[1].replace('*',''))\n\t\t# If allele1 is greater than allele2, swap the order.\n\t\tif allele1 > allele2:\n\t\t\tgeno['diplotype'] = '*' + str(allele2) + '/' + '*' + str(allele1) \n\n\telif geno['allele1'] and geno['allele2']:\n\t\t# If allele is in starformat, remove. Otherwise it will be left unchanged. \n\t\tallele1 = int(geno['allele1'].replace('*',''))\n\t\tallele2 = int(geno['allele2'].replace('*',''))\n\t\t# If allele1 is greater than allele2, swap the order.\n\t\tif allele1 > allele2:\n\t\t\tgeno['allele1'] = '*' + str(allele2)\n\t\t\tgeno['allele2'] = '*' + str(allele1)\n\ndef getPhenotype(geno):\n\t\"\"\" The following function will return the phenotype corresponding to the user specified genotype \"\"\"\n\n\t# Dictionary containing Genotype to Phenotype Information  \n\tgeno_pheno = {'*1/*1': 'UGT1A1 Normal Metabolizer', '*1/*27': 'UGT1A1 Intermediate Metabolizer', '*1/*28': 'UGT1A1 Intermediate Metabolizer', '*1/*36': 'UGT1A1 Normal Metabolizer', '*1/*37': 'UGT1A1 Intermediate Metabolizer', '*1/*6': 'UGT1A1 Intermediate Metabolizer', '*1/*80': 'UGT1A1 Intermediate Metabolizer', '*27/*27': 'UGT1A1 Poor Metazolizer', '*27/*28': 'UGT1A1 Poor Metazolizer', '*27/*36': 'UGT1A1 Intermediate Metabolizer', '*27/*37': 'UGT1A1 Poor Metazolizer', '*27/*80': 'UGT1A1 Poor Metazolizer', '*28/*28': 'UGT1A1 Poor Metazolizer', '*28/*36': 'UGT1A1 Intermediate Metabolizer', '*28/*37': 'UGT1A1 Poor Metazolizer', '*28/*80': 'UGT1A1 Poor Metazolizer', '*36/*36': 'UGT1A1 Normal Metabolizerc', '*36/*37': 'UGT1A1 Intermediate Metabolizer', '*36/*80': 'UGT1A1 Intermediate Metabolizer', '*37/*37': 'UGT1A1 Poor Metazolizer', '*37/*80': 'UGT1A1 Poor Metazolizer', '*6/*27': 'UGT1A1 Poor Metazolizer', '*6/*28': 'UGT1A1 Poor Metazolizer', '*6/*36': 'UGT1A1 Intermediate Metabolizer', '*6/*37': 'UGT1A1 Poor Metazolizer', '*6/*6': 'UGT1A1 Poor Metazolizer', '*6/*80': 'UGT1A1 Poor Metazolizer', '*80/*80': 'UGT1A1 Poor Metazolizer'}\n\n\t# Arranging the order so the lower numerical allele is on the left. Also add a star '*' if not in star allele format. \n\talleleFormat(geno)\n\n\t# Get appropriate phenotype corresponding to gene\n\tif geno['diplotype']:\n\t\tif geno['diplotype'] in geno_pheno:\n\t\t\t# Assign appropriate phenotype pair value for the corresponding key(diplotype) from dictonary geno_pheno\n\t\t\tgeno['phenotype'] = geno_pheno[geno['diplotype']]\n\t\telse:\n\t\t \traise Exception(\"Incorrect/invalid input for diplotype\")\n\n\telif geno['allele1'] and geno['allele2']:\n\t\t# Convert allele to diplotype format\n\t\tcombine_allele = geno['allele1'] + '/' + geno['allele2']\n\t\tif combine_allele in geno_pheno:\n\t\t\tgeno['phenotype'] = geno_pheno[combine_allele]\n\t\telse:\n\t\t \traise Exception(\"Incorrect/invalid input for allele\")\n\n\treturn str(geno[\"phenotype\"])\n\n# def Function_Test():\n# \t\"\"\" This function tests to see if functions are behaving as intended \"\"\" \n# \ttest1 = {'diplotype': '27/1', 'allele1': '', 'allele2': '', 'phenotype': ''}\n# \ttest2 = {'diplotype': '', 'allele1': '27', 'allele2': '1', 'phenotype': ''}\n# \ttest3 = {'diplotype': '*27/*1', 'allele1': '', 'allele2': '', 'phenotype': ''}\n# \ttest4 = {'diplotype': '', 'allele1': '*27', 'allele2': '*1', 'phenotype': ''}\n# \n# \t# Test that the scenarios work for function alleleFormat\n# \t# alleleFormat(test1)\n# \t# alleleFormat(test2)\n# \t# alleleFormat(test3)\n# \t# alleleFormat(test4)\n# \n# \t# Test that scenarios work for function genoPheno\n# \tgetPhenotype(test1)\n# \tgetPhenotype(test2)\n# \tgetPhenotype(test3)\n# \tgetPhenotype(test4)\n# \n# \tprint(test1)\n# \tprint(test2)\n# \tprint(test3)\n# \tprint(test4)\n# \n# # Call test\n# Function_Test()\n","engineType":"PYTHON","functionName":"getPhenotype"},"url":"http://n2t.net/ark:/UTG1A1/object1"}
	